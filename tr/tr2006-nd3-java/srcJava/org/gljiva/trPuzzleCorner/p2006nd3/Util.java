package org.gljiva.trPuzzleCorner.p2006nd3;

import java.lang.RuntimeException;
import java.util.regex.Pattern;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Comparator;

/**
 * Generic utilities not associated with other types.
 * @author bert
 */
public abstract class Util {
    /**
     * Disallow construction by making the constructor private.
     */
    private Util() {
        throw new RuntimeException("construction shouldn't be possible");
    }

    /************************************************************************/

    /**
     * An internal map array used to implement the sqrt() function for positive
     * integers smaller than 1000.
     */
    private static final byte[] SQRT_MAP;
    static {
        byte[] map = new byte[1000];
        for (int i = 0;  i < map.length;  ++i) {
            map[i] = 0;
        }
        for (byte i = 1;  i < 32;  ++i) {
            map[i*i] = i;
        }
        SQRT_MAP = map;
    }

    /**
     * Calculates the square root of a number between 1 and 999.
     * @param value  The number whose square root is desired.
     * @return       Square root of <i>value</i>, or 0 if not a perfect square.
     */
    public static int sqrt(int value) {
        return SQRT_MAP[value];
    }
    
    /**
     * Determines if a number between 1 and 999 is a square.
     * @param value  The number in question.
     * @return       true if a perfect square, false if not.
     */
    public static boolean isSquare(int value) {
        return ( SQRT_MAP[value] != 0 );
    }

    /************************************************************************/

    /**
     * Split a string into substrings, using the specified delimiter string.
     *  
     * @param sep    Separator (a simple string, <b>not</b> a regex!).
     * @param string The string to split.
     * @return       An array of strings generated by splitting.
     */
    public static String[] split(String sep, String string) {
        return string.split(Pattern.quote(sep));
    }

    /**
     * Join an array of strings, using the specified delimiter string.
     * 
     * @param sep     The separator string.
     * @param strings The strings to be joined.
     * @return        The joined string.
     */
    public static String join(String sep, String... strings) {
        // The dumbest, least efficient possible implementation. =)
        String result = null;
        for (String s : strings) {
            if (result == null) {
                result = s;
            } else {
                result = result + sep + s;
            }
        }
        return result;
    }

    /************************************************************************/
    
    /**
     * Check if the elements of a list are unique according to {@code equals}
     * (i.e. no element {@code equals} another element).
     * 
     * @param list  The list to check.
     * @return      True if unique, false if (at least) two elements are equal.
     */
    public static <T> boolean areUnique(List<T> list) {
        for (int i = 0;  i < (list.size()-1);  ++i) {
            T x = list.get(i);
            for (int j = i+1;  j < list.size();  ++j) {
                T y = list.get(j);
                if (x.equals(y))
                    return false;
            }
        }
        return true;
    }
    
    /**
     * Check if the elements of a list are unique according to the specified
     * comparator (i.e. the comparator doesn't return 0 for any pair of
     * elements).
     * 
     * @param list  The list to check.
     * @param cmp   The comparator to use.
     * @return      True if unique, false if (at least) two elements are equal.
     */
    public static <T> boolean areUnique(List<T> list,
            Comparator<? super T> cmp) {
        for (int i = 0;  i < (list.size()-1);  ++i) {
            T x = list.get(i);
            for (int j = i+1;  j < list.size();  ++j) {
                T y = list.get(j);
                if (cmp.compare(x, y) == 0)
                    return false;
            }
        }
        return true;
    }

    /************************************************************************/
    
    /**
     * Print a list of elements.
     * @param list  The elements to print.
     */
    public static <T> void printList(List<T> list) {
        for (T e : list) {
            System.out.println(e);
        }        
        System.out.println();
    }

    /**
     * Sort and print a list of elements.
     * @param list  The elements to print.
     */
    public static <T extends Comparable<? super T>>
    void printListSorted(List<T> list) {
        list = new ArrayList<T>(list);
        Collections.sort(list);
        printList(list);
    }
    
}
