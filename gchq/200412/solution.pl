#!/usr/bin/perl
use warnings;
use strict;
use Text::Wrap;

use lib '../lib';
use LetterPattern;
use Cypher::Decode;
use Cypher::Encode;

## input

@ARGV = ('cyphertext-200412');
my $key = '';
my (%data, @data, %cat);
while (<>) {
  s/[\r\n]+//g;
  /^\s+(.+)\s*$/ and $key = lc $1, next;
  /\S/ or next;
  push @{$data{$key}}, $_;
  push @data, $_;
  $cat{$_} = $key;
}
$data{''} = \@data;

## read cached cypher relationships, generated by imdb-attack-actor.pl

our $cyphers = {};
require 'cyphers-200412.data' if -f 'cyphers-200412.data';
my (%name2movie, %name2cyphgen, %name_capitalize, %movie_year);
$name2movie{lc $_} = $cyphers->{$_}[0],
  $name2cyphgen{lc $_} = $cyphers->{$_}[1],
    $movie_year{$cyphers->{$_}[0]} = $cyphers->{$_}[2],
    $name_capitalize{lc $_} = $_ for keys %$cyphers;

##

sub squote ( $ ) { $_[0] =~ /'/ ? qq["$_[0]"] : qq['$_[0]']; }
sub dquote ( $ ) { $_[0] =~ /"/ ? qq['$_[0]'] : qq["$_[0]"]; }
sub pquote ( $ ) { qq[($_[0])]; }
sub bquote ( $ ) { qq<[$_[0]]>; }

## show solved names, corresponding cyphers, and movies

sub center ( $;$ ) {
  my ($text, $wid) = @_;
  $wid = 80 unless $wid;
  ' ' x int(($wid - length($text) - 1) / 2) . $text;
}

my %code2name = map
  +( Cypher::Encode->new($Cypher::Base::atoz, $name2cyphgen{$_})->($_) => $_ ),
  keys %name2cyphgen;


my $end = $#{$data{men}};
$end = $#{$data{women}} if $end < $#{$data{women}};

my (@men_fmt, @women_fmt);

for my $i (0..$end) {
  my $m_code  = $data{men}[$i];
  my $m_name  = $code2name{$m_code} or die;
  my $m_cname = $name_capitalize{$m_name} || $m_name;

  my $w_code  = $data{women}[$i];
  my $w_name  = $code2name{$w_code} or die;
  my $w_cname = $name_capitalize{$w_name} || $w_name;

  if (length $m_code <= 16) {
    push @men_fmt, sprintf "%-16s %18s", $m_cname, pquote $m_code;
  } else {
    push @men_fmt, sprintf("%-35s", $m_cname), sprintf("%35s", pquote $m_code);
  }

  if (length $w_code <= 16) {
    push @women_fmt, sprintf "%-16s %18s", $w_cname, pquote $w_code;
  } else {
    push @women_fmt, sprintf("%s", $w_cname), sprintf("%35s", pquote $w_code);
  }
}

print "people:\n\n";
printf "%-35s   %s\n", center('---MEN---', 35), center('---WOMEN---', 35);
while (@men_fmt || @women_fmt) {
  my $m = shift(@men_fmt)   || (' ' x 35);
  my $w = shift(@women_fmt) || '';
  print "$m   $w\n";
}

## show solved names, corresponding cyphers, and movies

my (%minfo);
for my $code (@data) {
  my $name  = $code2name{$code} or die;
  my $cname = $name_capitalize{$name} || $name;
  my $movie = $name2movie{$name} or next;
  my $cyph  = $name2cyphgen{$name} or next;
  my $mw    = $cat{$code};
  my $year  = $movie_year{$movie} || '';

  ! exists $minfo{$movie}{$mw}
    or die "Movie conflict: $minfo{$movie}{$mw}{name} vs $name ($mw)";
  ! exists $minfo{$movie}{cyphgen} or $minfo{$movie}{cyphgen} eq $cyph
    or die "Inconsistent cyphergen text";

  $minfo{$movie}{$mw}     = { name => $cname, code => $code };
  $minfo{$movie}{cyphgen} = $cyph;
  $minfo{$movie}{year}    = $year;
}

my @by_year = sort {$minfo{$a}{year} <=> $minfo{$b}{year}} keys %minfo;

print "\n\nmovies and cyphers:\n\n";
for my $movie (@by_year) {
  my $m_name  = $minfo{$movie}{men}{name};
  my $w_name  = $minfo{$movie}{women}{name};
  my $cyph    = $minfo{$movie}{cyphgen};
  my $year    = $minfo{$movie}{year};

  printf "%-25s%25s\n",   $m_name, $w_name;
  printf "%s\n", center("$movie  ($year)", 50);
  printf "%s\n", center($cyph, 50);
  #printf "%s\n", center($Cypher::Base::atoz, 40);
  print "\n";
}

## secret message

print "\n\nsecret message:\n\n";
my @msg;
my $i = 0;
for my $movie (@by_year) {
  my $cyph    = $minfo{$movie}{cyphgen};
  my @mark = map +(' ', $_), split //, $cyph;
  push @msg, $mark[$i+1];
  $mark[$i] = '(';  $mark[$i+2] = ')';  $i += 2;
  print join('', @mark, "\n");
}

print join('', "\n", @msg, "\n");
